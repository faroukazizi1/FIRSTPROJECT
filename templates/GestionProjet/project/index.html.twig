{% extends 'BackOffice/base.html.twig' %}

{% block body %}
	<div class="container">
		<div class="page-inner"> 
			<div class="col-md-12 ">
				<div class="card">
					<div class="card-header">
						<div class="d-flex align-items-center">
							<h4 class="card-title">Liste Projet</h4>

							<a class="btn btn-primary btn-round ms-auto" href="#" data-bs-toggle="modal" data-bs-target="#addProjectModal">
								<i class="fa fa-plus"></i> Add Project
							</a>

							<a href="{{ path('app_project_pdf') }}" class="btn btn-label-info btn-round ms-2 me-2" target="_blank">
								Générer le PDF
							</a>
							</div>
								<div class="row">
									<div class="col-sm-6 col-md-3">
										<div class="card card-stats card-round">
											<div class="card-body">
												<div class="row align-items-center">
													<div class="col-icon">
														<div class="icon-big text-center icon-primary bubble-shadow-small">
															<i class="fas fa-users"></i>
														</div>
													</div>
													<div class="col col-stats ms-3 ms-sm-0">
														<div class="numbers">
															<p class="card-category">Number of projects</p>
															<h4 class="card-title">{{ totalProjects }}</h4>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>

									<div class="col-sm-6 col-md-3">
										<div class="card card-stats card-round">
											<div class="card-body">
												<div class="row align-items-center">
													<div class="col-icon">
														<div class="icon-big text-center icon-secondary bubble-shadow-small">
															<i class="fas fa-user-check"></i>
														</div>
													</div>
													<div class="col col-stats ms-3 ms-sm-0">
														<div class="numbers">
															<p class="card-category">Completed projects</p>
															<h4 class="card-title">{{ completedProjects }}</h4>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>

								<div class="col-sm-6 col-md-3">
									<div class="card card-stats card-round">
										<div class="card-body">
											<div class="row align-items-center">
												<div class="col-icon">
													<div class="icon-big text-center icon-warning bubble-shadow-small">
														<i class="fas fa-tasks"></i>
													</div>
												</div>
												<div class="col col-stats ms-3 ms-sm-0">
													<div class="numbers">
														<p class="card-category">Uncompleted projects</p>
														<h4 class="card-title">{{ uncompletedProjects }}</h4>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
						
						<div class="card-body">
						<!-- Add Project Modal -->
						<div class="modal fade" id="addProjectModal" tabindex="-1" role="dialog" aria-hidden="true">
							<div class="modal-dialog" role="document">
								<div class="modal-content">
									<div class="modal-header border-0">
										<h5 class="modal-title">
											<span class="fw-mediumbold">Add New Project</span>
										</h5>
										<button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
											<span aria-hidden="true">×</span>
										</button>
									</div>
									<form action="{{ path('app_project_new') }}" method="post" novalidate>
										<div class="modal-body">
											{{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}
											<div class="form-group">
												{{ form_label(form.titre) }}
												{{ form_widget(form.titre, {'attr': {'class': 'form-control'}}) }}
												<div class="text-danger small">{{ form_errors(form.titre) }}</div>
											</div>
											<div class="form-group">
												{{ form_label(form.description) }}
												{{ form_widget(form.description, {'attr': {'class': 'form-control', 'rows': 3}}) }}
												<div class="text-danger small">{{ form_errors(form.description) }}</div>
											</div>
											<div class="form-group">
												{{ form_label(form.statut) }}
												{{ form_widget(form.statut, {'attr': {'class': 'form-control'}}) }}
												<div class="text-danger small">{{ form_errors(form.statut) }}</div>
											</div>
											<div class="form-group">
												{{ form_label(form.date_debut) }}
												{{ form_widget(form.date_debut, {'attr': {'class': 'form-control'}}) }}
												<div class="text-danger small">{{ form_errors(form.date_debut) }}</div>
											</div>
											<div class="form-group">
												{{ form_label(form.date_fin) }}
												{{ form_widget(form.date_fin, {'attr': {'class': 'form-control'}}) }}
												<div class="text-danger small">{{ form_errors(form.date_fin) }}</div>
											</div>
										</div>
										<div class="modal-footer border-0">
											<button class="btn btn-primary">{{ button_label|default('Save') }}</button>
											{{ form_end(form) }}
											<button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
										</div>
									</form>
								</div>
							</div>
						</div>

						<!-- Edit Project Modal -->
						<div class="modal fade" id="editProjectModal" tabindex="-1" role="dialog" aria-hidden="true">
							<div class="modal-dialog" role="document">
								<div class="modal-content">
									<div class="modal-header border-0">
										<h5 class="modal-title">
											<span class="fw-mediumbold">Edit</span>
											<span class="fw-light">Project</span>
										</h5>
										<button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
											<span aria-hidden="true">×</span>
										</button>
									</div>
									<form id="projectEditForm" method="post">
										<div
											class="modal-body" id="editProjectModalBody"><!-- Form content will be loaded here via AJAX -->
										</div>
									</form>
								</div>
							</div>
						</div>

						<!-- Project Table -->
						<div class="table-responsive">
							<div id="add-row_wrapper" class="dataTables_wrapper container-fluid dt-bootstrap4">
 								<div class="row">
 									<div class="col-sm-12 col-md-6">
 										<div class="dataTables_length" id="add-row_length">
 											<label>Show
 												<select name="add-row_length" aria-controls="add-row" class="form-control form-control-sm">
 													<option value="10">10</option>
 													<option value="25">25</option>
 													<option value="50">50</option>
 													<option value="100">100</option>
 												</select>
 												entries
 											</label>
 										</div>
 									</div>
 									<div class="col-sm-12 col-md-6">
 										<div id="add-row_filter" class="dataTables_filter">
 											<label>Search:
 												<input type="text" class="form-control form-control-sm" placeholder="" aria-controls="add-row">
 											</label>
 										</div>
 									</div>
 								</div>
 								<div class="row">
 									<div class="col-sm-12">
 										<table id="add-row" class="display table table-striped table-hover dataTable" role="grid" aria-describedby="add-row_info">
											<thead>
												<tr role="row">
													<th class="sorting_asc" tabindex="0" aria-controls="add-row" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Name: activate to sort column descending" style="width: 196.938px;">Titre</th>
													<th class="sorting" tabindex="0" aria-controls="add-row" rowspan="1" colspan="1" aria-label="Position: activate to sort column ascending" style="width: 290.75px;">Description</th>
													<th class="sorting" tabindex="0" aria-controls="add-row" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 159.625px;">Statut</th>
													<th class="sorting" tabindex="0" aria-controls="add-row" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 159.625px;">Date_debut</th>
													<th class="sorting" tabindex="0" aria-controls="add-row" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 159.625px;">Date_fin</th>
													<th style="width: 120.688px;" tabindex="0" aria-controls="add-row" rowspan="1" colspan="1" aria-label="Action: activate to sort column ascending">Action</th>
												</tr>
											</thead>
											<tbody>
												{% for project in projects %}
													<tr>
														<td>{{ project.titre }}</td>
														<td>{{ project.description }}</td>
														<td>{{ project.statut }}</td>
														<td>{{ project.dateDebut ? project.dateDebut|date('Y-m-d') : '' }}</td>
														<td>{{ project.dateFin ? project.dateFin|date('Y-m-d') : '' }}</td>
														<td>
															<div class="form-button-action">
																<button type="button" data-bs-toggle="modal" data-bs-target="#editProjectModal" onclick="loadEditForm({{ project.id }})" class="btn btn-link btn-primary btn-lg edit-project-btn" data-original-title="Edit Project">
																	<i class="fa fa-edit"></i>
																</button>
																<button type="button" onclick="window.location.href='{{ path('app_project_show', {'id': project.id}) }}'" data-bs-toggle="tooltip" title="" class="btn btn-link btn-primary" data-original-title="show project">
																	<i class="fa fa-eye"></i>
																</button>
																<button type="button" onclick="window.location.href='{{ path('app_project_delete', {'id': project.id}) }}'" data-bs-toggle="tooltip" title="" class="btn btn-link btn-danger" data-original-title="Remove">
																	<i class="fas fa-trash text-danger text-secondary" aria-hidden="true"></i>
																</button>
															</div>
														</td>
													</tr>
												{% else %}
													<tr>
														<td colspan="7">no records found</td>
													</tr>
												{% endfor %}
											</tbody>
										</table>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		</div>

		{% if form is defined and not form.vars.valid %}
			<script>
				document.addEventListener("DOMContentLoaded", function () {
				const modal = new bootstrap.Modal(document.getElementById('addProjectModal'));
				modal.show(); });
			</script>
		{% endif %}



		<script>
			function loadEditForm(projectId) 
			{
				const modalBody = document.querySelector('#editProjectModal .modal-body');
				const form = document.querySelector('#projectEditForm');

				// Affichage d’un spinner de chargement pendant le fetch
				modalBody.innerHTML = 
				`<div class="text-center p-4">
					<div class="spinner-border text-primary" role="status">
						<span class="visually-hidden">Loading...</span>
					</div>
					<p>Loading project details...</p>
					</div>`;

					//Appel dynamique de la route
					fetch(`{{ path('app_project_edit', {'id': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', projectId), 
					{headers: {'X-Requested-With': 'XMLHttpRequest'}}).then(response => response.text()).then
					(html => 
						{ modalBody.innerHTML = html;
							// Set the correct form action with the project ID
							form.action = `{{ path('app_project_edit', {'id': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', projectId);
						}
					).catch(error => {modalBody.innerHTML = `<div class="alert alert-danger">Error loading form: ${error.message}</div>`;});	
			}
			// Add this script to your index.html.twig
document.addEventListener('DOMContentLoaded', function() {
    const editModal = document.getElementById('editProjectModal');
    
    if (editModal) {
        editModal.addEventListener('shown.bs.modal', function() {
            const form = document.getElementById('projectEditForm');
            
            if (form) {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(form);
                    
                    fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.text();
                    })
                    .then(data => {
                        try {
                            // Try to parse as JSON (success case)
                            const jsonData = JSON.parse(data);
                            if (jsonData.success) {
                                // Close the modal
                                const bsModal = bootstrap.Modal.getInstance(editModal);
                                bsModal.hide();
                                
                                // Show success message and reload the page
                                alert(jsonData.message);
                                window.location.reload();
                            }
                        } catch (e) {
                            // If not JSON, it's the form with errors
                            const modalBody = document.querySelector('#editProjectModal .modal-body');
                            modalBody.innerHTML = data;
                            
                            // Re-attach event listener to the new form
                            const newForm = document.getElementById('editProjectForm');
                            if (newForm) {
                                newForm.addEventListener('submit', function(e) {
                                    e.preventDefault();
                                    const formData = new FormData(newForm);
                                    // Re-submit using the same fetch logic
                                    // (You may want to extract this to a function to avoid duplication)
                                });
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while processing your request.');
                    });
                });
            }
        });
    }
});


// Add this script to your index.html.twig file, after your existing scripts
 document.addEventListener('DOMContentLoaded', function() {
     // Get the search input
     const searchInput = document.querySelector('#add-row_filter input[type="text"]');
     
     if (searchInput) {
         // Add event listener for input changes
         searchInput.addEventListener('input', function() {
             const searchTerm = this.value.toLowerCase().trim();
             const tableRows = document.querySelectorAll('#add-row tbody tr');
             
             // Loop through all table rows
             tableRows.forEach(function(row) {
                 // Get text content from the first cell (title)
                 const title = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
                 const description = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                 const status = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
                 
                 // Check if the search term is found in any of the cells
                 if (title.includes(searchTerm) || 
                     description.includes(searchTerm) || 
                     status.includes(searchTerm)) {
                     row.style.display = ''; // Show the row
                 } else {
                     row.style.display = 'none'; // Hide the row
                 }
             });
             
             // Check if there are any visible rows
             const visibleRows = document.querySelectorAll('#add-row tbody tr:not([style*="display: none"])');
             const noResultsRow = document.querySelector('#no-results-row');
             
             // If no results and no message row exists, add one
             if (visibleRows.length === 0 && !noResultsRow) {
                 const tbody = document.querySelector('#add-row tbody');
                 const newRow = document.createElement('tr');
                 newRow.id = 'no-results-row';
                 newRow.innerHTML = `<td colspan="6" class="text-center">No projects found matching "${searchTerm}"</td>`;
                 tbody.appendChild(newRow);
             } 
             // If there are results but message row exists, remove it
             else if (visibleRows.length > 0 && noResultsRow) {
                 noResultsRow.remove();
             }
         });
         
         // Add clear button functionality
         const filterDiv = document.querySelector('#add-row_filter');
         if (filterDiv) {
             // Create clear button
             const clearButton = document.createElement('button');
             clearButton.textContent = 'Clear';
             clearButton.className = 'btn btn-sm btn-outline-secondary ms-2';
             clearButton.addEventListener('click', function() {
                 searchInput.value = '';
                 // Trigger the input event to update the table
                 searchInput.dispatchEvent(new Event('input'));
                 searchInput.focus();
             });
             
             // Add clear button after the search input
             filterDiv.appendChild(clearButton);
         }
     }
 });
	$(document).ready(function() {
		$('#add-row').DataTable();
	});

    let currentDate = new Date();

    function renderCalendar(date) {
        const monthYear = document.getElementById('monthYear');
        const calendarBody = document.getElementById('calendarBody');
        const year = date.getFullYear();
        const month = date.getMonth();

        const firstDay = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();

        monthYear.textContent = date.toLocaleString('default', { month: 'long', year: 'numeric' });

        calendarBody.innerHTML = '';
        let row = document.createElement('tr');

        for (let i = 0; i < firstDay; i++) {
            row.appendChild(document.createElement('td'));
        }

        for (let day = 1; day <= daysInMonth; day++) {
            if ((row.children.length) === 7) {
                calendarBody.appendChild(row);
                row = document.createElement('tr');
            }

            const cell = document.createElement('td');
            cell.textContent = day;

            // Tu peux ici ajouter un onclick pour afficher des événements
            cell.onclick = () => alert(`Jour sélectionné : ${day}/${month + 1}/${year}`);

            row.appendChild(cell);
        }

        calendarBody.appendChild(row);
    }

    function prevMonth() {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar(currentDate);
    }

    function nextMonth() {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar(currentDate);
    }

    document.addEventListener('DOMContentLoaded', () => renderCalendar(currentDate));


		</script>


		
{% endblock %}
